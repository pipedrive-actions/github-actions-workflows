name: Package Checks
on:
  workflow_call:
    inputs:
      revision:
        description: Git revision
        type: string
        required: true
      runner:
        description: Label for GitHub-hosted runner to use. Defaults to ubuntu-latest
        type: string
        required: false
        default: ubuntu-latest

    outputs:
      revision:
        description: Revison
        value: ${{ jobs.pre-publish.outputs.revison }}
      version:
        description: Version to bump
        value: ${{ jobs.pre-publish.outputs.version }}

jobs:
  pre-publish:
    runs-on: ${{ inputs.runner }}
    outputs:
      revison: ${{ steps.rev-parse-revision.outputs.commit }}
      version: ${{ steps.npm-package-version.outputs.version }}
    steps:
      - name: Get Pipedrive GitHub Actions Bot Token
        uses: actions/create-github-app-token@v1
        id: get-workflow-token
        with:
          app-id:  ${{ vars.PD_PUBLIC_GHA_BOT_APPLICATION_ID }}
          private-key:  ${{ secrets.PD_PUBLIC_GHA_BOT_APPLICATION_PRIVATE_KEY_PEM }}
          owner: ${{ github.repository_owner }}
          repositories: test-public-npm-module

      - name: Checkout gha-setup
        uses: actions/checkout@v4
        with:
          repository: pipedrive/gha-setup
          path: gha-setup
          ref: master
          token: ${{ secrets.GHA_SETUP_ACCESS_TOKEN }}

      - name: Check Pull Request against defined rules
        uses: ./gha-setup/actions/pull-request-check
        with:
          github-token: ${{ steps.get-workflow-token.outputs.token }}

      - name: Update Branch from master
        uses: actions/github-script@v7
        id: update-branch
        env:
          HEAD_REF: ${{ github.event.pull_request.head.ref }}
          BASE_REF: ${{ github.event.pull_request.base.ref }}
        with:
          result-encoding: string
          script: |
            const {status, data} = await github.rest.repos.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              base: `${process.env.HEAD_REF}`,
              head: `${process.env.BASE_REF}`,
            });
            if (status === 201) {
              return data.sha
            }
            if (status === 204) {
              return `${process.env.HEAD_REF}`
            }
            core.setFailed(`Failed to update branch from master. Status: ${status}`)

      - name: Checkout repo ${{ github.repository }}
        uses: actions/checkout@v4
        with:
          ref: ${{ steps.update-branch.outputs.result }}
          fetch-depth: 1

      # Find the commit hash of checked out revision or updated branch.
      # We output it for the next phases.
      - name: Reverse Parse Revision
        id: rev-parse-revision
        shell: bash
        run: |
          commit=$(git rev-parse --verify --end-of-options HEAD)
          echo "commit=$commit" >> "$GITHUB_OUTPUT"

      - name: NPM Package Checks
        uses: ./gha-setup/actions/npm-package-checks

      - name: Parse NPM Package Version
        id: npm-package-version
        uses: ./gha-setup/actions/npm-package-label-parser